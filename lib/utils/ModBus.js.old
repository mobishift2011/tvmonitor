var ModbusRTU = require("modbus-serial");
var log = require('../utils/log4js').default();

const networkErrors = ["ESOCKETTIMEDOUT", "ETIMEDOUT", "ECONNRESET", "ECONNREFUSED"];
function Modbus(option) {
    this.client = new ModbusRTU();
    this.id = parseInt(option.id) || 1;
    this.ip = option.ip || '127.0.0.1';
    this.port = option.port || 8502;
    this.timeOut = option.timeOut || 1000;
    this.connectType = option.connectType || 'read';
}

Modbus.prototype.connect4Read = function (startNum, length) {
    if (this.client.isOpen()) {
        return this.readHoldingRegisters(startNum, length);
    }
    var that = this;
    return this.client.connectTCP(this.ip, {port: this.port}).then(that.setClient(that))
        .then(function () {
            log.info(that.ip, ':', that.port, '  已经连接');
            return that.readHoldingRegisters(startNum, length)
        })
        .catch(function (e) {
            //log.error('连接err：'+e);
            console.log('连接err：' + e)
            that.checkError(e, that,startNum, length);
        })
}

Modbus.prototype.connect4Write = function (writeStart, data) {
    if (this.client.isOpen()) {
        return this.writeRegisters(writeStart, data);
    }
    var that = this;
    return this.client.connectTCP(this.ip, {port: this.port}).then(that.setClient(that))
        .then(function () {
            log.info(that.ip, ':', that.port, '  已经连接');
            return that.writeRegisters(writeStart, data)
        })
        .catch(function (e) {
            log.error('连接err：'+e);
            that.checkError(e, that ,writeStart, data);
        })
}

Modbus.prototype.setClient = function (that) {
    that.client.setID(that.id);
    that.client.setTimeout(that.timeOut);
}

Modbus.prototype.readHoldingRegisters = function (startNum, length) {
    return this.client.readHoldingRegisters(startNum, length);
}

Modbus.prototype.writeRegisters = function (writeStart, data) {
    return this.client.writeRegisters(writeStart, data);
}

Modbus.prototype.checkError = function (e, that ,data1,data2) {
    if (e.errno && networkErrors.includes(e.errno)) {
        log.info("we have to reconnect" + that.ip);
        let timeoutTime = 60 * 1000;
        that.client.close();
        setTimeout(function () {
            that.client = new ModbusRTU();
            if (that.connectType == 'read') {
                that.connect4Read(data1,data2)
            } else if (that.connectType == 'write') {
                that.connect4Write(data1,data2)
            }
        }, timeoutTime)
    }
}

Modbus.prototype.close = function () {
    this.client.close();
}

Modbus.prototype.isOpen = function () {
    var that = this;
    return this.client.connectTCP(this.ip, {port: this.port}).then(that.setClient(that))
}


module.exports = Modbus